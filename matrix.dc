
# 1 2 3 4 5 6 7 8 9 2 4 6 9 6 3 
# 5 3

# 1 2 3
# 4 5 6
# 7 8 9
# 2 4 6
# 9 6 3


[Z0*K+k]sD # D: General delete function, removes TOS silently

# 5sk [lXx lk1-dsk 0<L]sL lk0<L # execute X for k=5..1 if k=5
# 5sk [lXx lkd1-sk 0<L]sL lk0<L # execute X for k=5..0 if k=5
# 5sk [lXx lkd1-sk 0<L]dsLx     # execute X for k=5..1 or for k=0
# 5sk [lXx lk1-dsk 0<L]dsLx     # execute X for k=5..1 or for k=0

# R: Extract a row M from a matrix
# matrix elements listed in reading order numRows numCols | TOS
[
 SM  # Requesting row M
 Sn  # A has n columns
 Sm  # A has m rows
 
 []SL
 
 [Fetching row ]n lMn [ from a matrix with ]n lmn [ rows and ]n lnn [ columns]nAP
 
 # The first M-1 rows have (M-1)*n elements
 # Therefore, skip the first (M-1)*n elements by pushing them onto a named stack A
# #  Try (m-(M-1))*n
 [Skipping ]n lM1-ln*n [ elements]nAP
 lM1-ln*sk [SA lk1-dsk 0<L]sL lk0<L
 
 # Row M has n elements
 # Therefore, copy the next n elements by pushing them onto a named stack B along with a stack named A
 [Copying ]n lnn [ elements]nAP
 lnsk [dSBSA lk1-dsk 0<L]sL lk0<L
 
 # Restore the first (M-1)*n + n elements from stack A
 [Restoring ]n lMln*n [ elements]nAP
 lMln*sk [LA lk1-dsk 0<L]sL lk0<L
 
 # Restore the n elements that we copied into stack B
 [Restoring ]n lnn [ copied elements]nAP
 lnsk [LB lk1-dsk 0<L]sL lk0<L
 
 
 0LLZ*Lm*Ln*K+k
]sR


#[Row 1:]nAP  lA1lRxfAPAP
#[Row 2:]nAP clA2lRxfAPAP
#[Row 3:]nAP clA3lRxfAPAP
#[Row 4:]nAP clA4lRxfAPAP
#[Row 5:]nAP clA5lRxfAPAP
#[Finished]nAP

1 2 3 4 5 6 7 8 9 2 4 6 3 6 9
5 3 1 lRxf